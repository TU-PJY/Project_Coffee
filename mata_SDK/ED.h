#pragma once
#include <Scene.h>
#include <CameraController.h>

class ED : public GameObject {
private:
	// 현재 위치, 커피를 부술 때 마다 오른쪽으로 이동한다.
	GLfloat Position{};

	// 커피를 부순 후 목표 이동 위치
	GLfloat DestPosition{};

	// 카메라 위치
	GLfloat CameraPosition{};

	// 각 상태마다 다른 프레임을 출력한다
	GLfloat Frame = Idle;

	GLfloat PrevGeneratedFrame{};

	// 현재 프레임과 이전 프레임
	GLfloat PrevFrame = Frame;

	// 앞뒤로 늘어나는 효과를 준다
	GLfloat AnimationSize{};

	// 앞으로 기울어지는 효과를 준다
	GLfloat TiltValue{};

	// 이드 숨쉬기 애니메이션
	GLfloat BreatheSize{};
	SinLoop BreatheLoop{};

	// 상태가 변경되면 일정 시간 이후 다시 Idle 상태로 북귀하도록 한다
	TimerUtil StateTimer{};

	// 이드 사운드 채널
	SoundChannel SndChannel{};
	SoundChannel SndChannel2{};
	        
	// 이드가 커피를 부순 횟수
	int BreakCount{};

	// 커피를 부숴야하는 개수, 초기값 7개
	int MaxBreak{7};

	// 다음 선반의 시작 지점
	GLfloat NextPosition{};

	// 키가 눌린 상태
	// 하나라도 눌린 키가 있으면 조작할 수 없다
	bool KeyPressed[4]{};

public:
	void InputKey(KeyEvent& Event) {
		if (Event.Type == SPECIAL_KEY_DOWN) { 
			// 3개의 키 중 하나라도 눌린 키가 있으면 동작하지 않는다
			for (int i = 0; i < 4; i++)
				if (KeyPressed[i])
					return;

			if (Event.SpecialKey == SK_ARROW_LEFT)
				KeyPressed[0] = true;
			else if (Event.SpecialKey == SK_ARROW_DOWN)
				KeyPressed[1] = true;
			else if (Event.SpecialKey == SK_ARROW_RIGHT)
				KeyPressed[2] = true;
			else
				return;

			// 가장 앞에 있는 커피를 부순다. 
			if (auto Shelf = scene.Find("shelf"); Shelf) {
				bool IsCorrect{};

				ItemStruct Item = Shelf->GetFrontCoffee();

				// 앞에 사람이 서있다면 커피와 상호작용 할 수 없다.
				if (Item.IsPeopleFront)
					return;

				else {
					StateTimer.Reset();
					AnimationSize = 1.0;

					if (Item.Type == Can && Event.SpecialKey == SK_ARROW_LEFT)
						IsCorrect = true;
					else if (Item.Type == Box && Event.SpecialKey == SK_ARROW_DOWN)
						IsCorrect = true;
					else if (Item.Type == Glass && Event.SpecialKey == SK_ARROW_RIGHT)
						IsCorrect = true;

					// 종류에 맞는 키를 눌러야 부술 수 있다.
					if (IsCorrect) {
						soundUtil.Stop(SndChannel);
						soundUtil.Play(Snd.Whoosh, SndChannel);

						if (Item.IsUpside)
							Frame = randomUtil.Gen(RANDOM_TYPE_INT, HitHigh1, HitHigh2);
						else
							Frame = randomUtil.Gen(RANDOM_TYPE_INT, HitLow1, HitLow2);
						PrevFrame = Frame;

						DestPosition += 0.5;

						Shelf->BreakCoffee();
						BreakCount++;

						// 커피를 다 부수면 다음 선반으로 이동한다
						// 부숴야할 커피는 4개 증가한다
						if (BreakCount == MaxBreak) {
							DestPosition = NextPosition;
							BreakCount = 0;
							MaxBreak += 4;

							TiltValue = 3.0;

							soundUtil.Stop(SndChannel2);
							soundUtil.Play(Snd.NextWhoosh, SndChannel2);
						}
					}

					// 맞는 키가 아닐 경우 엉뚱한 곳을 친다.
					else {
						soundUtil.Stop(SndChannel);
						soundUtil.Play(Snd.MissWhoosh, SndChannel);

						if (Item.IsUpside)
							Frame = randomUtil.Gen(RANDOM_TYPE_INT, HitLow1, HitLow2);
						else
							Frame = randomUtil.Gen(RANDOM_TYPE_INT, HitHigh1, HitHigh2);

						PrevFrame = Frame;
					}
				}
			}
		}

		// 키 입력을 모두 중단해야 다른 키를 입력할 수 있다
		if (Event.Type == SPECIAL_KEY_UP) {
			if (Event.SpecialKey == SK_ARROW_LEFT)
				KeyPressed[0] = false;
			else if (Event.SpecialKey == SK_ARROW_DOWN)
				KeyPressed[1] = false;
			else if (Event.SpecialKey == SK_ARROW_RIGHT)
				KeyPressed[2] = false;
		}

		if (Event.Type == NORMAL_KEY_DOWN && Event.NormalKey == NK_SPACE) {
			for (int i = 0; i < 4; i++)
				if (KeyPressed[i])
					return;

			KeyPressed[3] = true;

			// 앞에 있는 사람을 발로 찬다.
			if (auto Shelf = scene.Find("shelf"); Shelf) {
				ItemStruct Item = Shelf->GetFrontCoffee();

				if (Item.IsPeopleFront) {
					if (auto People = scene.Find("people"); People) {
						soundUtil.Stop(SndChannel);
						soundUtil.Play(Snd.Whoosh, SndChannel);

						StateTimer.Reset();
						AnimationSize = 2.0;

						People->HitPeople();
						Shelf->EnableCoffeeHit();
						Frame = KickPeople;
						PrevFrame = Frame;
					}
				}
			}
		}

		if (Event.Type == NORMAL_KEY_UP && Event.NormalKey == NK_SPACE) {
			KeyPressed[3] = false;
		}
	}

	void UpdateFunc(float FrameTime) {
		// 프레임
		// 이전 프레임과 현재 프레임이 다를 경우 이전 프레임을 갱신하고 애니메이션 출력하도록 한다
		// 단, 현재 프레임이 Idle일 경우 AnimationSize를 변경하지 않는다
		if ((int)PrevFrame != (int)Frame) {
			if ((int)Frame != Idle) 
				AnimationSize = -0.7;
			PrevFrame = Frame;
		}
		
		// 현재 상태가 Idle이 아니라면 0.3초 후 다시 Idle 상태로 복귀시킨다
		if ((int)Frame != Idle) {
			StateTimer.Update(FrameTime);
			if (StateTimer.CheckMiliSec(0.3, 2, CHECK_AND_RESET)) 
				Frame = Idle; 
		}


		// 애니메이션
		// AnimationSize가 0.0보다 작다면 다시 0.0으로 복귀시킨다
		mathUtil.Lerp(AnimationSize, 0.0, 15.0, FrameTime);

		// TiltValue가 0.0보다 크다면 다시 0.0으로 복귀시킨다
		mathUtil.Lerp(TiltValue, 0.0, 5.0, FrameTime);

		// 이드의 숨쉬기 애니메이션을 업데이트 한다
		BreatheSize = BreatheLoop.Update(0.03, 6.0, FrameTime);


		// 이동
		// 목표 위치로 이동하도록 한다
		mathUtil.Lerp(Position, DestPosition, 20.0, FrameTime);

		// 카메라가 이드를 부드럽게 따라오도록 한다
		mathUtil.Lerp(CameraPosition, DestPosition, 7.0, FrameTime);

		// 이드를 약간 오른쪽에서 바라보도록 한다
		cameraControl.MoveCamera(CameraPosition + 0.5, 0.0);
	}

	void RenderFunc() {
		glm::vec2 FinalPosition { Position + AnimationSize * 0.5 + TiltValue * 0.5 , BreatheSize * 0.5 - AnimationSize * 0.25};
		glm::vec2 FinalSize{ 2.0 + AnimationSize, 2.0 + BreatheSize - AnimationSize * 0.5};

		Begin();
		transform.Move(MoveMatrix, FinalPosition);
		transform.Scale(MoveMatrix, FinalSize);
		transform.Shear(MoveMatrix, TiltValue, 0.0);
		imageUtil.RenderStaticSpriteSheet(Img.ED, Frame);
	}

	GLfloat GetPosition() {
		return Position;
	}

	// 다음 선반의 시작 지점을 미리 알린다
	void TellNextPosition(GLfloat Position) {
		NextPosition = Position;
	}
};